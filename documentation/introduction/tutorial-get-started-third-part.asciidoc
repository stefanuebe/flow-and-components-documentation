---
title: Part 3 - Creating Live Filtering for Entities
order: 4
layout: page
---

== Creating Live Filtering for Entities

All modern applications need search functionality and it also makes for a nice Vaadin development exercise. 

In this part of the tutorial we add filtering functionality to the `Customer` listing we created in <<tutorial-get-started-second-part#,Part 2 - Listing Entities in a Grid>>.  

. In `MainView.java` introduce a `TextField` component:

+
[source,java]
----
private TextField filterText = new TextField();
----

. Configure the text field to display an input prompt and add a text change listener, by adding the following code at the beginning of the constructor:

+
[source,java]
----
filterText.setPlaceholder("Filter by name...");
filterText.setValueChangeMode(ValueChangeMode.EAGER);
filterText.addValueChangeListener(e -> updateList());
----

* Placeholder shows the given String inside the field as long as no value is set. When the user starts typing, the placeholder will be automatically removed. 
* As its name implies, the value change listener reacts to changes in the value in the text field. `EAGER` ensures the change event is fired immediately while the user types. This is ideal for this kind of automatic filtering. 

. To ensure the filter value is taken into consideration when updating grid items, change the body of the `updateList` method as shown below: 

+
[source,java]
----
public void updateList() {
    /**
    * Note that filterText.getValue() might return null; in this case, the backend
    * takes care of it for us
    */
    grid.setItems(service.findAll(filterText.getValue()));
}
----
* The method will now take the filter value into consideration and pass it to the backend service when updating the grid items. 

. Add a button to clear the text field to improve usability, by adding the following code to the constructor directly after the `filterText` configuration:

+
[source,java]
----
Button clearFilterTextBtn = new Button(
       new Icon(VaadinIcon.CLOSE_CIRCLE));
clearFilterTextBtn.addClickListener(e -> filterText.clear());
----

* While the search field could previously be cleared using the keyboard, adding a button makes it easier for the user. 
* We use the "X" icon, `VaadinIcon.CLOSE_CIRCLE`, from the built-in set of icons provided by Flow.
* In the click listener, we simply clear the text from the field. 

. Align the text field and the button so they line up next to each other, by adding the following code to the constructor directly after `clearFilterTextBtn`: 
 
+
[source,java]
----
HorizontalLayout filtering = new HorizontalLayout(filterText,
    clearFilterTextBtn);
----

* Using `HorizontalLayout` is the simplest way to do this. Flow provides many different kinds of layouts. 


. Change the `add(grid)` code line in the constructor to: 
+
[source,java]
----
add(filtering, grid);
----

* This line previously only added the grid layout. It now additionally adds the `filtering` layout.


. At this point your `MainView` body code should be:

+
[source,java]
----
/**
 * The main view contains a button and a click listener.
 */
@Route("")
public class MainView extends VerticalLayout {

    private CustomerService service = CustomerService.getInstance();
    private Grid<Customer> grid = new Grid<>();
    private TextField filterText = new TextField();

    public MainView() {
        filterText.setPlaceholder("Filter by name...");
        filterText.setValueChangeMode(ValueChangeMode.EAGER);
        filterText.addValueChangeListener(e -> updateList());
        Button clearFilterTextBtn = new Button(
                new Icon(VaadinIcon.CLOSE_CIRCLE));
        clearFilterTextBtn.addClickListener(e -> filterText.clear());
        HorizontalLayout filtering = new HorizontalLayout(filterText,
                clearFilterTextBtn);

        grid.setSizeFull();

        grid.addColumn(Customer::getFirstName).setHeader("First name");
        grid.addColumn(Customer::getLastName).setHeader("Last name");
        grid.addColumn(Customer::getStatus).setHeader("Status");

        add(filtering, grid);
        setHeight("100vh");
        updateList();
    }

    public void updateList() {
        /**
         * Note that filterText.getValue() might return null; in this case, the backend
         * takes care of it for us
         */
        grid.setItems(service.findAll(filterText.getValue()));
    }
}
----

. Save your code changes and refresh your browser to view the changes.

*NEXT*: *<<tutorial-get-started-forth-part#,Part 4 - Creating a Form Using Plain Java>>*
