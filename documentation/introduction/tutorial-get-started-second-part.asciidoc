---
title: Part 2 - Listing Entities in a Grid
order: 3
layout: page
---

== Listing Entities in a Grid

In this part of the tutorial we cover how to display data in a grid in your UI.

== Adding Domain Objects

Before getting into actual Vaadin development, we add the necessary domain objects and a dummy backend. In a real-world application, you would most probably have something similar implemented with JPA and EJB, or a Spring-based service.

The first step is to copy three Java classes from GitHub and add them to your project. 
We use these classes to build the UI. 

Here is a list of the files to copy: 

* https://raw.githubusercontent.com/vaadin/flow-and-components-documentation/master/tutorial-getting-started/src/main/java/com/vaadin/starter/skeleton/CustomerStatus.java[`CustomerStatus.java`]: This is a simple enum class
* https://raw.githubusercontent.com/vaadin/flow-and-components-documentation/master/tutorial-getting-started/src/main/java/com/vaadin/starter/skeleton/Customer.java[`Customer.java`]: This this is the main domain object. It is the basic Java bean that we use in our example.
* https://raw.githubusercontent.com/vaadin/flow-and-components-documentation/master/tutorial-getting-started/src/main/java/com/vaadin/starter/skeleton/CustomerService.java[`CustomerService.java`]: This is a simple service class via which you can request and modify `Customer` instances. Think of this class as the entry point to the dummy database.


[NOTE]
The actual implementation of these classes is not relevant for this tutorial, but feel free to explore and enhance your Java knowledge.


=== Adding UI Code to Show Data in a Grid

When building a UI for a data-centric application, the first step is typically to list the data from your backend. Vaadin offers several components and ways to do this. In this example, we use the `Grid` component to present our customer data in tabular form. 

. Reference `CustomerService` and introduce a `Grid` field in [classname]`MainView.java`. 

+
[source, java]
----
@Route("")
public class MainView extends VerticalLayout {

    private CustomerService service = CustomerService.getInstance();
    private Grid<Customer> grid = new Grid<>();

    public MainView() {
----

. List all properties of all `Customer` objects from the backend service, by replacing the [classname]`MainView` constructor with:

+
[source,java]
----
public MainView() {
    grid.setSizeFull();

    grid.addColumn(Customer::getFirstName).setHeader("First name");
    grid.addColumn(Customer::getLastName).setHeader("Last name");
    grid.addColumn(Customer::getStatus).setHeader("Status");

    add(grid);
    setHeight("100vh");
    updateList();
}
----

** In conjunction, the lines `setHeight("100vh")` and `grid.setSizeFull()` make sure that both the app and the `Grid` use the entire available vertical space. "100vh" means 100% of the viewport height and is more reliable than setting your main view to "100%". 

. Add the following code to put the customer listing part in its own `updateList` method, using the `public` modifier:

+
[source,java]
----
public void updateList() {
    grid.setItems(service.findAll());
}
----

* This allows you to refresh the listing from various places in your application. 


. At this point your `MainView` body code should be:

+
[source,java]
----
private CustomerService service = CustomerService.getInstance();
private Grid<Customer> grid = new Grid<>();

public MainView() {
    grid.setSizeFull();

    grid.addColumn(Customer::getFirstName).setHeader("First name");
    grid.addColumn(Customer::getLastName).setHeader("Last name");
    grid.addColumn(Customer::getStatus).setHeader("Status");

    add(grid);
    setHeight("100vh");
    updateList();
}

public void updateList() {
    grid.setItems(service.findAll());
}
----

. Save your code changes and refresh your browser to view the changes.  

*NEXT*: *<<tutorial-get-started-third-part#,Part 3 - Creating Live Filtering for Entities>>*
