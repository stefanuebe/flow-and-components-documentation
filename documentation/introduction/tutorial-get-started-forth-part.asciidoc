---
title: Part 4 - Creating a Form Using Plain Java
order: 5
layout: page
---

== Creating a Form Using Plain Java

In this part of the tutorial, we:

* Create a form using plain Java and connect it to the grid.
* Add functionality to add, update and delete customer data. 

=== Creating the Form and Connecting It to the Grid

. Create a new class, `CustomerForm`.

. Edit `CustomerForm.java` and add the following:
.. Create two https://vaadin.com/components/vaadin-text-field[text] fields and a https://vaadin.com/components/vaadin-combo-box[combo box] field, by adding the following field declarations :

+
[source,java]
----
private TextField firstName = new TextField("First name");
private TextField lastName = new TextField("Last name");
private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
----
* Vaadin offers numerous kinds of prebuilt components for editing different kinds of properties. 

.. Add references to the `Customer`, `CustomerService` and `MainView` classes, by adding the fields and a basic constructor that accepts `MainView` as a parameter, and
.. Add the fields.

+
[source,java]
----
private CustomerService service = CustomerService.getInstance();
private Customer customer;
private MainView mainView;

public CustomerForm(MainView mainView) {
    this.mainView = mainView;

    add(firstName, lastName, status);
}
----
* We use these references later. 

. In `MainView.java`:
.. Add the new form as a field:
+
[source,java]
----
private CustomerForm form = new CustomerForm(this);
----

.. Display the form, and wrap the `Grid` and `CustomerForm` in a horizontal layout, by replacing the `add(filtering, grid)` code line with:
+
[source,java]
----
HorizontalLayout main = new HorizontalLayout(grid, form);
main.setAlignItems(Alignment.START);
main.setSizeFull();

add(filtering, main);
----

* `main.setAlignItems(Alignment.START);` makes sure that the content is aligned to the top of the layout.

. Save your code changes and refresh your browser. The form now contains three fields and is shown to the right of the grid.

. In `CustomerForm.java`, add all enum values as valid options in the `ComboBox` field, by adding the following line to the constructor:

+
[source,java]
----
status.setItems(CustomerStatus.values());
----
+


. In `CustomerForm.java`, complete the form by creating a public API. This allows you to pass a selected item from `MainView.java` to `CustomerForm.java`. 
.. Add a `Binder` as a field:

+
[source,java]
----
private Binder<Customer> binder = new Binder<>(Customer.class);
----

* A `Binder` is an object that connects data to a form that is defined in the declarative format.
* You can use a binder class to define how the values in a business object should be bound to the fields shown in the UI. 
The binder takes care of reading values from the business object, and converts user data from the format expected by the field to that expected by the business object. 


.. Configure the binder in the form constructor, by adding:
+
[source,java]
----
binder.bindInstanceFields(this);
----

* When using this method the binder analyze the bean and the form classes and bind properties and fields with same names. For instance the TextField `firstName` will be bound to the `Customer`'s property `firstName`. You can of course do this also manually.

.. Create a setter method for the customer field. 

+
[source,java]
----
public void setCustomer(Customer customer) {
    this.customer = customer;
    binder.setBean(customer);
}
----

* This calls the `Binder.setBean` method that initializes all fields in the form and automatically updates the values in the domain objects as the corresponding field value changes in the UI

+
[NOTE]
As an alternative to naming-convention-based data binding, you can use the https://vaadin.com/api/platform/11.0.0/com/vaadin/flow/data/binder/PropertyId.html[`@PropertyId`] annotation on fields to explicitly declare the edited property.

. In `MainView.java`, connect the form to the grid, by adding the following selection listener at the end of the `MainView` constructor:

+
[source,java]
----
grid.asSingleSelect().addValueChangeListener(event -> {
    form.setCustomer(event.getValue());
});
----

* This listener simply takes the `Customer` object of the selected row and passes it to the `CustomerForm` for editing. 

. At this point, your `CustomerForm` body code should be:

+
[source,java]
----
public class CustomerForm extends FormLayout {
    private TextField firstName = new TextField("First name");
    private TextField lastName = new TextField("Last name");
    private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
    private CustomerService service = CustomerService.getInstance();
    private Customer customer;
    private MainView mainView;
    private Binder<Customer> binder = new Binder<>(Customer.class);

    public CustomerForm(MainView mainView) {
        this.mainView = mainView;
        add(firstName, lastName, status);
        status.setItems(CustomerStatus.values());
        binder.bindInstanceFields(this);
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.setBean(customer);
    }
}
----

. Save your code changes and refresh your browser to view the changes. When you select a row, the data is copied to the fields because the form is now "connected" to the grid.

=== Adding Save and Delete Buttons

In this part, we add functionality to update and delete `Customer` objects.  

. In `CustomerForm.java` add buttons as Java fields: 

+
[source,java]
----
private Button save = new Button("Save");
private Button delete = new Button("Delete");
----

. Add the buttons in a `HorizontalLayout` by adding following line to the constructor, 

+
[source,java]
----
HorizontalLayout buttons = new HorizontalLayout(save, delete);
----

. Add the `buttons` object by amending the `add(firstName, lastName, status)` code line to:

+
[source,java]
----
add(firstName, lastName, status, buttons);
----

. Make the save button prominent by decorating it with a style name:

+
[source,java]
----
save.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
----

* This improves the UI by highlighting the more common action. 

. Disable the save and cancel buttons when no customer is selected, by amending the `setCustomer` method to:

+
[source,java]
----
public void setCustomer(Customer customer) {
    this.customer = customer;
    binder.setBean(customer);
    boolean enabled = customer != null;
    save.setEnabled(enabled);
    delete.setEnabled(enabled);
    if (enabled) {
        firstName.focus();
    }
}
----
* Disabling the buttons discourages user interaction when there is no selection. 
* As an alternative, you could disable the input fields, by calling the `setEnabled()` method on each. 
* Setting the focus on the `firstName` field improves the user experience.

. Finalize the `setCustomer` setter method by calling `setCustomer(null)` at the end of the constructor.  

+
[source,java]
----
setCustomer(null);
----
* This makes sure that the save and delete buttons are disabled by default. 

. Add methods that will be called by the save and delete button click listeners in the next step.

+
[source,java]
----
private void delete() {
    service.delete(customer);
    mainView.updateList();
    setCustomer(null);
}

private void save() {
    service.save(customer);
    mainView.updateList();
    setCustomer(null);
}
----

. Add listeners to the buttons to call these methods by adding simple Lambda expressions to the constructor: 

+
[source,java]
----
save.addClickListener(e -> this.save());
delete.addClickListener(e -> this.delete());
----


. At this point your `CustomerForm` body code should be:

+
[source,java]
----
public class CustomerForm extends FormLayout {
    private TextField firstName = new TextField("First name");
    private TextField lastName = new TextField("Last name");
    private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
    private CustomerService service = CustomerService.getInstance();
    private Customer customer;
    private MainView mainView;
    private Binder<Customer> binder = new Binder<>(Customer.class);
    private Button save = new Button("Save");
    private Button delete = new Button("Delete");

    public CustomerForm(MainView mainView) {
        this.mainView = mainView;
        add(firstName, lastName, status);
        status.setItems(CustomerStatus.values());
        binder.bindInstanceFields(this);
        HorizontalLayout buttons = new HorizontalLayout(save, delete);
        add(firstName, lastName, status, buttons);
        save.getElement().setAttribute("theme", "primary");
        setCustomer(null);
        save.addClickListener(e -> this.save());
        delete.addClickListener(e -> this.delete());
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.setBean(customer);
        boolean enabled = customer != null;
        save.setEnabled(enabled);
        delete.setEnabled(enabled);
        if (enabled) {
            firstName.focus();
        }
    }

    private void delete() {
        service.delete(customer);
        mainView.updateList();
        setCustomer(null);
    }

    private void save() {
        service.save(customer);
        mainView.updateList();
        setCustomer(null);
    }
}
----

. Save your code changes and refresh your browser to view the changes. You can now edit and update current customer records. 
+
[TIP]
For a truly re-usable form component in a real life project, you would want to introduce an interface to replace the `MainView` class. To keep things simple, we have not included this in the tutorial. As an even better alternative, you could use an event system like CDI events to completely decouple the components.

=== Adding New Customers

In this part, we add functionality in `MainView.java` to add new customer records. We create a new button, labeled *Add new customers*, above the grid next to the `filterText` field. 

. Add a new `Button` with a click listener, by adding the following lines of code to the constructor, directly after `HorizontalLayout filtering = new HorizontalLayout...`:

+
[source,java]
----
Button addCustomerBtn = new Button("Add new customer");
addCustomerBtn.addClickListener(e -> {
    grid.asSingleSelect().clear();
    form.setCustomer(new Customer());
});
HorizontalLayout toolbar = new HorizontalLayout(filtering,
    addCustomerBtn);
----

* The click listener first clears a possible selection from the grid, then instantiates a new customer object, and then passes that to the form for editing.
* The `HorizontalLayout` creates a `toolbar` that includes both components next to the `filtering` composition.

. Add the toolbar by replacing the `add(filtering, grid);` code line with:
+
[source,java]
----
add(toolbar, main);
----

* The `filtering` composition was moved to the `toolbar` in the previous step.

. At this point:
.. Your `MainView` body code should be:
+
[source,java]
----
/**
 * The main view contains a button and a click listener.
 */
@Route("")
public class MainView extends VerticalLayout {

    private CustomerService service = CustomerService.getInstance();
    private Grid<Customer> grid = new Grid<>();
    private TextField filterText = new TextField();
    private CustomerForm form = new CustomerForm(this);

    public MainView() {
        filterText.setPlaceholder("Filter by name...");
        filterText.setValueChangeMode(ValueChangeMode.EAGER);
        filterText.addValueChangeListener(e -> updateList());
        Button clearFilterTextBtn = new Button(
	        new Icon(VaadinIcon.CLOSE_CIRCLE));
        clearFilterTextBtn.addClickListener(e -> filterText.clear());
        HorizontalLayout filtering = new HorizontalLayout(filterText,
                clearFilterTextBtn);

        Button addCustomerBtn = new Button("Add new customer");
        addCustomerBtn.addClickListener(e -> {
                grid.asSingleSelect().clear();
                form.setCustomer(new Customer());
        });
        HorizontalLayout toolbar = new HorizontalLayout(filtering,
                addCustomerBtn);

        grid.setSizeFull();

        grid.addColumn(Customer::getFirstName).setHeader("First name");
        grid.addColumn(Customer::getLastName).setHeader("Last name");
        grid.addColumn(Customer::getStatus).setHeader("Status");

        HorizontalLayout main = new HorizontalLayout(grid, form);
        main.setAlignItems(Alignment.START);
        main.setSizeFull();

        add(toolbar, main);
        setHeight("100vh");
        updateList();

        grid.asSingleSelect().addValueChangeListener(event -> {
                form.setCustomer(event.getValue());
        });

    }

    public void updateList() {
        /**
         * Note that filterText.getValue() might return null; in this case, the backend
         * takes care of it for us
         */
        grid.setItems(service.findAll(filterText.getValue()));
    }
}
----

.. Your `CustomerForm` body code should be::
+
[source,java]
----
public class CustomerForm extends FormLayout {
    private TextField firstName = new TextField("First name");
    private TextField lastName = new TextField("Last name");
    private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
    private CustomerService service = CustomerService.getInstance();
    private Customer customer;
    private MainView mainView;
    private Binder<Customer> binder = new Binder<>(Customer.class);
    private Button save = new Button("Save");
    private Button delete = new Button("Delete");

    public CustomerForm(MainView mainView) {
        this.mainView = mainView;
        add(firstName, lastName, status);
        status.setItems(CustomerStatus.values());
        binder.bindInstanceFields(this);
        HorizontalLayout buttons = new HorizontalLayout(save, delete);
        add(firstName, lastName, status, buttons);
        save.getElement().setAttribute("theme", "primary");
        setCustomer(null);
        save.addClickListener(e -> this.save());
        delete.addClickListener(e -> this.delete());
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.setBean(customer);
        boolean enabled = customer != null;
        save.setEnabled(enabled);
	delete.setEnabled(enabled);
	if (enabled) {
            firstName.focus();
        }
    }

    private void delete() {
        service.delete(customer);
        mainView.updateList();
        setCustomer(null);
    }

    private void save() {
        service.save(customer);
        mainView.updateList();
        setCustomer(null);
    }
}
----

. Save your code changes and refresh your browser to view the changes. 
Users can now create customer records that are stored in the demo backend.


Well done! You have just created your first app with Vaadin Flow. 


== Next Steps

Use your new skills to create new UIs for your existing Java apps. Here are a few resources to get you started: 

* http://spring.io/guides/gs/crud-with-vaadin/[Creating CRUD UI with Vaadin] - For ideas about creating full stack applications, with a real database backend, implemented with Spring Data JPA. 

* https://vaadin.com/start#vaadin10[Vaadin app starters] - Explore the various starter packages. 
* http://vaadin.com/directory[Directory] - Contains many Vaadin add-ons.
